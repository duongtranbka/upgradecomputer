50
10
4 5
6 2
10 2
10
8 5
9 1
10 2
24
15 3
20 4
23 7
39
17 8
30 5
31 9
60
57 12
31 19
38 16
10
2 2
8 3
5 2
10
9 3
3 3
5 2
10
8 8
2 1
6 1
10
2 2
5 2
3 2
10
2 2
5 2
4 2
20
12 5
19 6
10 2
20
16 4
15 3
4 4
20
14 2
5 6
2 5
20
8 4
5 4
3 2
20
4 5
2 5
10 6
20
11 5
3 5
9 3
20
5 4
9 3
7 4
20
11 4
7 3
2 4
20
4 1
5 3
15 5
20
17 1
12 4
9 3
30
14 9
18 3
29 10
30
12 10
4 9
6 5
30
1 4
28 7
27 2
30
6 1
15 10
23 8
30
4 7
28 1
13 2
30
7 6
6 5
18 2
30
23 2
21 5
11 7
30
11 8
28 8
12 8
30
18 10
4 10
6 9
30
12 7
19 7
3 1
40
14 1
9 4
21 5
40
11 11
40 8
25 10
40
36 11
2 12
3 17
40
15 2
21 9
37 20
40
29 3
5 2
2 11
40
19 6
21 13
29 11
40
14 11
9 4
4 11
40
18 10
14 12
35 8
40
12 10
1 6
10 10
40
24 8
25 6
9 1
50
3 6
46 8
36 12
50
38 9
15 1
4 3
50
19 15
31 2
47 6
50
49 9
10 7
8 11
50
43 15
39 10
30 7
60
12 17
16 12
29 3
60
55 20
33 20
16 20
60
27 10
36 3
54 5
60
37 20
42 20
19 20
60
60 13
18 10
37 16
///
#include <iostream>
using namespace std;
int Answer, N, d;
int Gate[2][4];
int Visit[100];
int Select[2][4];
int V[4];
void Nhet(int x, int y)
{
	int k=0;
	int u =Gate[0][x], v;
	if ( Visit[u] == 0)
	{
		Visit[u] =1;
		k++;
		d++;
	}
	while (k < Gate[1][x] && y == 1)
	{
		u--;
		if (u >=1 && k < Gate[1][x] && Visit[u] == 0)
		{
			Visit[u] =1;
			k++;
			d = d+ Gate[0][x] -u +1;
		}

		v = 2*Gate[0][x] - u;

		if (v <= N && k < Gate[1][x] && Visit[v] == 0)
		{
			Visit[v] =1;
			k++;
			d = d+ v - Gate[0][x] +1;
		}
	}

	while (k < Gate[1][x] && y == 2)
	{
		u++;
		if (u <= N && k < Gate[1][x] && Visit[u] == 0)
		{
			Visit[u] =1;
			k++;
			d = d+ u - Gate[0][x] +1;
		}

		v = 2*Gate[0][x] - u;

		if (v >= 1 && k < Gate[1][x] && Visit[v] == 0)
		{
			Visit[v] =1;
			k++;
			d = d+ Gate[0][x] -v +1;
		}
	}
}

void loop(int x)
{
	if (x > 3)
	{
		d =0;
		for(int i =1; i<=N; i++) Visit[i] =0;
		for(int i =1; i<=3; i++)
		{
			Nhet(Select[0][i], Select[1][i]);
		}
		if (d < Answer) Answer=d;
	}
	else
	{
		for (int i = 1; i<=3; i++)
			if (V[i] ==0)
			{
				V[i] =1;
				Select[0][x] =i;
				Select[1][x] = 1;
				loop(x+1);
				Select[1][x] = 2;
				loop(x+1);
				V[i] =0;
			}
	}
}

int main(int argc, char** argv)
{
	int test_case;
	int T;


	freopen("input.txt", "r", stdin);
	cin >> T;
	for(test_case = 1; test_case <= T; ++test_case)
	{
		Answer = 9999;
		d =0;
		cin >> N;
		for (int i=1; i<=3; i++)
		{
			cin >> Gate[0][i];
			cin >> Gate[1][i];
		}

		loop(1);
		cout << "Case #" << test_case << endl << Answer << endl;
	}
	return 0;
}
