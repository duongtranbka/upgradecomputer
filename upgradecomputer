


////////////
source
////////////
#include <iostream>
using namespace std;

#define MAXN 101
#define MAXM 10000
int T;
int M;
int Ans;
int v; // ten thanh
int W[MAXN];      // so luong may ban da
int SL[MAXN];   // so luong lien ket
int DS[MAXM][3]; // danh sach thanh tri
bool check[MAXM][2];

int P[MAXN];

void Makeset( int x){
	P[x] = x;
}
int Findset(int x){
	if (P[x] != x)
		P[x] = Findset(P[x]);
	return P[x];
}

void Union(int x, int y){
	int u = Findset(x);
	int v = Findset(y);
	P[u] = v;
}

int main(){
	freopen("input.txt", "r", stdin);
	cin >> T;
	for (int tc = 1; tc <= T; tc++){
		cin >> M;
		int col = 0;
		int tmp = v;
		int vi;
		Ans = 0;
		//int W[MAXN];      // so luong may ban da
		//int SL[MAXN];   // so luong lien ket
		 // danh sach thanh tri
		bool check[MAXM][2] ={0};
		for (int i = 0; i < M; i++){
			cin >> v;
			Makeset(v);
			cin>> W[v] >> SL [v];
			tmp = v;
			for (int j = 0; j < SL[v]; j++){
				cin >> vi;
				if (tmp < vi){
					DS[col][0] = v;
					DS[col++][1] = vi;
				}
			}
		}
		for (int i = 0; i< col;i++){
			DS[i][2] = W[DS[i][0]] + W[DS[i][1]];
		}
		int min, tmp0, tmp1, tmp2;
		for (int i = 0; i < col - 1; i++){
			min = i;
			for (int j = i+1; j < col; j++){
				if (DS[j][2] > DS[min][2]) min = j;
			}
			if (min != i){
				tmp0 = DS[min][0];
				tmp1 = DS[min][1];
				tmp2 = DS[min][2];
				DS[min][0] = DS[i][0];
				DS[min][1] = DS[i][1];
				DS[min][2] = DS[i][2];
				DS[i][0] = tmp0;
				DS[i][1] =tmp1;
				DS[i][2] = tmp2;
			}
		}

		
		for (int i = 0; i < col; i++){
			if (Findset(DS[i][0]) != Findset(DS[i][1]) && !check[i][0] && !check[i][1]){
				Union(DS[i][0], DS[i][1]);
			}
			else if (Findset(DS[i][0]) == Findset(DS[i][1])){
				Ans += DS[i][2];
				check[i][0] = true;
				check[i][1] = true;
			}
		}
		cout <<"Case #"<<tc<<endl;
		cout<< Ans<<endl;
	}
	return 0;
}
