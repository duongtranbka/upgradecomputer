We consider a geographical map with N countries numbered from 1 to N (1 <= N <=  1000). For every country we know the numbers of other countries which are connected with its border. From every country we can reach to any other one, eventually crossing some borders. Write a program which determines whether it is possible to color the map only in two colors-red and blue in such a way that if two countries are connected their colors are different. The color of the first country is red. Your program must output one possible coloring for the other countries, or show, that such coloring is impossible.

[Input]
The first line is the total number of test cases T.

A test case has two lines. In each test case, the first line has N (the number of countries) and E (the number of border) separated by a space. The next line enumerates E border. A border consists of the two countries it connects. For example, the border connecting countries 5 and 28 is represented by “5 28” or “28 5”. The indices of countries are 1 through N. All adjacent numbers in a line are each separated by a space.

[Output]
Output the each answer in 1 line. Each line starts with ‘#x’, where x means the index of a test case, and puts a space, and prints the answer.

If the coloring is possible, this answer must contain a list of zeros and ones, without any separators between them. The i-th digit in this sequence is the color of the i-th country. 0 corresponds to red color, and one - to blue color. If a coloring is not possible, output the integer −1.

 

[I/O Example]

Input

1                                ← Total test case T

3 2                              ← Starting test case 1

1 2 2 3

 

Output

#1 010

 ///
 #include <iostream>
using namespace std;
int n,m,M[10000][10000],mark[10000000],check;
bool checkcolor(int x, int y)
{
	for(int i=0;i<n;i++)
	{
		if(M[x][i] )
		{
			if(mark[i] == y)
			{
				return true;
			}
		}
	}
	return false;
}
void inkqua()
{
	for(int i=0;i<n;i++)
	{
		if(mark[i] == 2)
		{
			cout<<"0";
		}else
		{
			cout<<"1";
		}
	}
	cout<<"\n";
}
bool checkmang()
{
	for(int i=0;i<n;i++)
	{
		if(mark[i] == 0)
			return false;
	}
	return true;
}
void backtrack(int k)
{
	if(k==n)
	{
		if(checkmang())
		{
			check++;
			//inkqua();
			return ;
		}
		return;
	}
	int kiemtra=0;
	for(int c=2;c<=3;c++)
	{
		if(!checkcolor(k,c))
		{
			kiemtra++;
			mark[k]=c;
			backtrack(k+1);
			if(checkmang())
			{
				//check++;
				return;
			}
			//mark[k]=0;
		}
	}
	if(kiemtra==0)
	{
		return;
	}
	//backtrack(k+1);

}
int main()
{
	freopen("input.txt","r",stdin);
	int t;
	cin>>t;
	for(int tc=1;tc<=t;tc++)
	{
		cin>>n>>m;
		int x,y;
		for(int i=0;i<(2*n);i++)
		{
			cin>>x>>y;
			M[x-1][y-1]=M[y-1][x-1]=1;
		}
/*		for(int i=0;i<n;i++)
		{
			for(int j=0;j<n;j++)
			{
				cout<<M[i][j]<<" ";
			}
			cout<<"\n";
		} */
			check=0;
		cout<<"#"<<tc<<" ";
		backtrack(0);
		if(check==0)
		{
		cout<<"-1"<<endl;;
		}else
		{
		inkqua();
		}
		for(int i=0;i<n;i++)
		{
		mark[i]=0;
		}
		
	}
	return 0;
}
